{"entries":[{"timestamp":1755866059958,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":185,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":96,"diffs":[[1,""]]},{"start1":1,"length1":10665,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":240,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1755866517027,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":792,"length1":54,"diffs":[[1,"        basic.showIcon(IconNames.MusicQuaver)\n"]]}]}]},{"timestamp":1755899404869,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1092,"length1":54,"diffs":[[1,"        basic.showIcon(IconNames.MusicCrotchet)\n"]]}]}]},{"timestamp":1755899410786,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":792,"length1":44,"diffs":[[1,"        basic.showIcon(IconNames.IconNames.Pitchfork)\n"]]},{"start1":1092,"length1":41,"diffs":[[1,"        basic.showIcon(IconNames.IconNames.Pitchfork)\n"]]},{"start1":6532,"length1":40,"diffs":[[1,"    basic.showIcon(IconNames.MusicQuaver)\n"]]},{"start1":7050,"length1":41,"diffs":[[1,"    basic.showIcon(IconNames.Ear)\n"]]},{"start1":9804,"length1":65,"diffs":[[1,"        basic.showIcon(IconNames.Ear)  // แสดงว่าพร้อมฟัง\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":240,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1755866059957,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Speech regonition\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1755899404869,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"// Thai Speech Recognition สำหรับ micro:bit v2\n// ใช้ไมโครโฟนและลำโพงในตัว ไม่ต้องใช้โมดูลเสริม\n\n// กำหนดคำสั่งภาษาไทย (ใช้การเปลี่ยนเป็นเสียงอังกฤษใกล้เคียง)\ninterface ThaiCommandMap {\n    [key: string]: string\n}\n\nlet thaiCommands: ThaiCommandMap = {\n    \"fire-bert\": \"ไฟเปิด\",      // ไฟเปิด\n    \"fire-pit\": \"ไฟปิด\",        // ไฟปิด  \n    \"yoot\": \"หยุด\",             // หยุด\n    \"rerm\": \"เริ่ม\",            // เริ่ม\n    \"chai\": \"ใช่\",              // ใช่\n    \"mai\": \"ไม่\",               // ไม่\n    \"kwaa\": \"ขวา\",              // ขวา\n    \"saai\": \"ซ้าย\",             // ซ้าย\n    \"keun\": \"ขึ้น\",             // ขึ้น\n    \"long\": \"ลง\"                // ลง\n}\n\n// ฟังก์ชันสำหรับแปลงเสียงพูดเป็นข้อความ (ใช้ไมโครโฟนในตัว)\nfunction listenForCommand(): string {\n    try {\n        // แสดงสัญลักษณ์ฟัง\n        basic.showIcon(IconNames.MusicQuaver)\n\n        // ใช้ไมโครโฟนในตัวของ micro:bit v2\n        input.setSoundThreshold(SoundThreshold.Loud, 150)\n\n        // รอจนกว่าจะมีเสียงดัง\n        while (!input.soundLevel()) {\n            basic.pause(100)\n        }\n\n        // บันทึกเสียง 2 วินาที\n        basic.showIcon(IconNames.MusicCrotchet)\n        let audioData: number[] = []\n\n        // อ่านค่าเสียงจากไมโครโฟนในตัว\n        for (let i = 0; i < 20; i++) {  // 2 วินาที (100ms x 20)\n            let soundLevel = input.soundLevel()\n            audioData.push(soundLevel)\n            basic.pause(100)\n        }\n\n        // จำลองการประมวลผล Speech Recognition\n        // ในการใช้งานจริงจะส่งไปยัง Cloud API\n        let averageSound = 0\n        for (let level of audioData) {\n            averageSound += level\n        }\n        averageSound = averageSound / audioData.length\n\n        // แปลงระดับเสียงเป็นคำสั่ง (ตัวอย่างง่ายๆ)\n        if (averageSound > 200) {\n            return \"fire-bert\"  // เสียงดังมาก = \"ไฟเปิด\"\n        } else if (averageSound > 100) {\n            return \"fire-pit\"   // เสียงปานกลาง = \"ไฟปิด\"\n        } else {\n            return \"\"\n        }\n\n    } catch (error) {\n        basic.showIcon(IconNames.Sad)\n        return \"\"\n    }\n}\n\n// ฟังก์ชันประมวลผลคำสั่งภาษาไทย\nfunction processThaiCommand(recognizedText: string): void {\n    if (!recognizedText) {\n        return\n    }\n\n    // หาคำสั่งที่ตรงกัน\n    let thaiWord = thaiCommands[recognizedText]\n\n    if (thaiWord) {\n        basic.showString(thaiWord, 150)\n\n        // ประมวลผลคำสั่ง\n        if (thaiWord == \"ไฟเปิด\") {\n            basic.showIcon(IconNames.Yes)\n            // เปิด LED และเล่นเสียงยืนยัน\n            pins.digitalWritePin(DigitalPin.P0, 1)\n            music.play(music.builtinPlayableSoundEffect(soundExpression.happy), music.PlaybackMode.UntilDone)\n\n        } else if (thaiWord == \"ไฟปิด\") {\n            basic.showIcon(IconNames.No)\n            // ปิด LED และเล่นเสียงยืนยัน\n            pins.digitalWritePin(DigitalPin.P0, 0)\n            music.play(music.builtinPlayableSoundEffect(soundExpression.sad), music.PlaybackMode.UntilDone)\n\n        } else if (thaiWord == \"ใช่\") {\n            basic.showIcon(IconNames.Happy)\n            music.play(music.builtinPlayableSoundEffect(soundExpression.giggle), music.PlaybackMode.UntilDone)\n\n        } else if (thaiWord == \"ไม่\") {\n            basic.showIcon(IconNames.Sad)\n            music.play(music.builtinPlayableSoundEffect(soundExpression.twinkle), music.PlaybackMode.UntilDone)\n\n        } else if (thaiWord == \"ขวา\") {\n            basic.showLeds(`\n                . . # . .\n                . # . # .\n                # . . . #\n                . # . # .\n                . . # . .\n                `)\n            // เล่นเสียง beep สั้น\n            music.play(music.builtinPlayableSoundEffect(soundExpression.hello), music.PlaybackMode.UntilDone)\n\n        } else if (thaiWord == \"ซ้าย\") {\n            basic.showLeds(`\n                . . # . .\n                . # . # .\n                # . . . #\n                . # . # .\n                . . # . .\n                `)\n            music.play(music.builtinPlayableSoundEffect(soundExpression.hello), music.PlaybackMode.UntilDone)\n\n        } else if (thaiWord == \"ขึ้น\") {\n            basic.showLeds(`\n                . . # . .\n                . # # # .\n                # . # . #\n                . . # . .\n                . . # . .\n                `)\n            music.play(music.builtinPlayableSoundEffect(soundExpression.spring), music.PlaybackMode.UntilDone)\n\n        } else if (thaiWord == \"ลง\") {\n            basic.showLeds(`\n                . . # . .\n                . . # . .\n                # . # . #\n                . # # # .\n                . . # . .\n                `)\n            music.play(music.builtinPlayableSoundEffect(soundExpression.slide), music.PlaybackMode.UntilDone)\n\n        } else if (thaiWord == \"หยุด\") {\n            basic.showIcon(IconNames.Square)\n            // เสียงหยุด\n            music.play(music.builtinPlayableSoundEffect(soundExpression.mysterious), music.PlaybackMode.UntilDone)\n\n        } else if (thaiWord == \"เริ่ม\") {\n            basic.showIcon(IconNames.Target)\n            // เสียงเริ่มต้น\n            music.play(music.builtinPlayableSoundEffect(soundExpression.soaring), music.PlaybackMode.UntilDone)\n        }\n\n        basic.pause(2000)\n    } else {\n        basic.showIcon(IconNames.Confused)\n        // เล่นเสียงแสดงว่าไม่เข้าใจคำสั่ง\n        music.play(music.builtinPlayableSoundEffect(soundExpression.mysterious), music.PlaybackMode.UntilDone)\n    }\n}\n\n// ฟังก์ชันเล่นเสียงตอบรับภาษาไทย (ใช้เสียง beep แทนคำพูด)\nfunction playThaiResponse(command: string): void {\n    // เล่นเสียงตอบกลับตามคำสั่งภาษาไทย\n    // เนื่องจาก micro:bit ไม่สามารถพูดภาษาไทยได้ จึงใช้เสียง beep แทน\n\n    if (command == \"ไฟเปิด\") {\n        // เสียง beep ยาว 2 ครั้ง = เปิดแล้ว\n        for (let i = 0; i < 2; i++) {\n            music.play(music.builtinPlayableSoundEffect(soundExpression.hello), music.PlaybackMode.UntilDone)\n            basic.pause(200)\n        }\n    } else if (command == \"ไฟปิด\") {\n        // เสียง beep สั้น 1 ครั้ง = ปิดแล้ว\n        music.play(music.builtinPlayableSoundEffect(soundExpression.sad), music.PlaybackMode.UntilDone)\n\n    } else if (command == \"ใช่\") {\n        // เสียงสูงขึ้น = ใช่\n        music.play(music.builtinPlayableSoundEffect(soundExpression.spring), music.PlaybackMode.UntilDone)\n\n    } else if (command == \"ไม่\") {\n        // เสียงต่ำลง = ไม่\n        music.play(music.builtinPlayableSoundEffect(soundExpression.slide), music.PlaybackMode.UntilDone)\n    }\n}\n\n// ฟังก์ชันบันทึกเสียงจากไมโครโฟนในตัว\nfunction recordAudio(): number[] {\n    // บันทึกเสียงจากไมโครโฟนในตัวของ micro:bit v2\n    basic.showIcon(IconNames.MusicQuaver)\n\n    // เริ่มบันทึกเสียงจากไมโครโฟนในตัว\n    let audioBuffer: number[] = []\n\n    // บันทึก 3 วินาที\n    for (let i = 0; i < 30; i++) {\n        // อ่านระดับเสียงจากไมโครโฟนในตัว\n        let soundSample = input.soundLevel()\n        audioBuffer.push(soundSample)\n        basic.pause(100)\n    }\n\n    basic.showIcon(IconNames.Yes)\n    return audioBuffer\n}\n\n// ฟังก์ชันตรวจจับเสียงสำหรับเริ่มการบันทึก\nfunction waitForVoiceTrigger(): boolean {\n    // รอให้มีเสียงพูดก่อนเริ่มบันทึก\n    basic.showIcon(IconNames.Ear)\n\n    // ตั้งค่าเกณฑ์เสียงสำหรับการเริ่มบันทึก\n    input.setSoundThreshold(SoundThreshold.Loud, 150)\n\n    // รอจนกว่าจะตรวจพบเสียงดัง\n    while (true) {\n        if (input.soundLevel() > 150) {\n            return true\n        }\n        basic.pause(50)\n    }\n}\n\n// ========== การตั้งค่าไมโครโฟนในตัว ==========\n\n// ฟังก์ชันเริ่มต้นการตั้งค่าไมโครโฟน\nfunction setupMicrophone(): void {\n    // ตั้งค่าเริ่มต้นสำหรับไมโครโฟนในตัว\n    // ตั้งค่าระดับเสียงที่ถือว่าเป็น \"เสียงดัง\"\n    input.setSoundThreshold(SoundThreshold.Loud, 200)\n    input.setSoundThreshold(SoundThreshold.Quiet, 50)\n\n    basic.showString(\"Mic Ready\", 100)\n}\n\n// ========== การใช้งานลำโพงในตัวของ micro:bit v2 ==========\n\n// ฟังก์ชันปรับแต่งระดับเสียง\nfunction setVolumeLevel(): void {\n    // ปรับระดับเสียงลำโพงในตัว\n    // (แม้เสียงจะไม่ค่อยชัด แต่ยังใช้งานได้)\n\n    // ตั้งค่าระดับเสียงปานกลาง\n    music.setVolume(128)  // 0-255 (128 = กึ่งกลาง)\n\n    // ทดสอบเสียง\n    basic.showString(\"Sound Test\", 100)\n    music.play(music.builtinPlayableSoundEffect(soundExpression.hello), music.PlaybackMode.UntilDone)\n}\n\n// ฟังก์ชันสร้างเสียง beep แบบกำหนดเอง\nfunction customBeep(frequency: number = 1000, duration: number = 200): void {\n    // สร้างเสียง beep ด้วยความถี่และระยะเวลาที่กำหนด\n    // (สำหรับตอบกลับคำสั่งเฉพาะ)\n\n    // ใช้ทำนองสั้นๆ แทน\n    music.playTone(frequency, duration)\n}\n\n// ========== เคล็ดลับปรับปรุงคุณภาพเสียง ==========\nfunction improveSoundQuality(): void {\n    // เคล็ดลับปรับปรุงเสียงจากลำโพงในตัว\n\n    // 1. ปรับระดับเสียงให้เหมาะสม (ไม่สูงเกินไป)\n    music.setVolume(100)\n\n    // 2. ใช้เสียงสั้นๆ แทนเสียงยาว\n    music.play(music.builtinPlayableSoundEffect(soundExpression.hello), music.PlaybackMode.UntilDone)  // สั้น ชัดกว่า\n    basic.pause(100)\n\n    // 3. หลีกเลี่ยงเสียงความถี่สูงมาก\n    // เสียงความถี่กลางจะชัดกว่า\n\n    // 4. วางมือหรือวัตถุเป็นโค้งใต้ micro:bit \n    // จะช่วยขยายเสียงให้ดังและชัดขึ้น\n}\n\n// ========== ฟังก์ชันส่งข้อมูลไป Cloud API ==========\nfunction sendToCloudAPI(audioData: number[]): string {\n    // ส่งข้อมูลเสียงไปยัง Google Cloud Speech API\n    // หรือ Azure Speech Services ที่รองรับภาษาไทย\n\n    try {\n        // เตรียมข้อมูลเสียง (จำลอง)\n        basic.showIcon(IconNames.Diamond)\n        basic.pause(1000)\n\n        // รับผลลัพธ์กลับมา (จำลอง)\n        return \"ไฟเปิด\"  // ผลลัพธ์จำลอง\n\n    } catch (error) {\n        basic.showIcon(IconNames.No)\n        return \"\"\n    }\n}\n\n// ========== ฟังก์ชันหลัก ==========\nfunction main(): void {\n    basic.showString(\"Thai Speech Ready\", 100)\n    // เล่นเสียงเริ่มต้น\n    music.play(music.builtinPlayableSoundEffect(soundExpression.soaring), music.PlaybackMode.UntilDone)\n\n    // ตั้งค่าเริ่มต้น\n    setupMicrophone()\n    setVolumeLevel()\n\n    while (true) {\n        basic.showIcon(IconNames.Ear)  // แสดงว่าพร้อมฟัง\n\n        // รอคำสั่งเสียง\n        let command = listenForCommand()\n\n        if (command) {\n            // ประมวลผลคำสั่ง\n            processThaiCommand(command)\n        } else {\n            // ไม่เข้าใจคำสั่ง\n            music.play(music.builtinPlayableSoundEffect(soundExpression.mysterious), music.PlaybackMode.UntilDone)\n        }\n\n        basic.pause(500)\n    }\n}\n\n// ========== การจัดการเหตุการณ์ปุ่ม ==========\n\n// กดปุ่ม A เพื่อทดสอบคำสั่ง \"ไฟเปิด\"\ninput.onButtonPressed(Button.A, function () {\n    processThaiCommand(\"fire-bert\")\n})\n\n// กดปุ่ม B เพื่อทดสอบคำสั่ง \"ไฟปิด\"\ninput.onButtonPressed(Button.B, function () {\n    processThaiCommand(\"fire-pit\")\n})\n\n// กดปุ่ม A+B เพื่อเริ่มการฟังคำสั่ง\ninput.onButtonPressed(Button.AB, function () {\n    basic.showString(\"Listening...\", 100)\n    let command = listenForCommand()\n    if (command) {\n        processThaiCommand(command)\n    }\n})\n\n// เริ่มโปรแกรม\nmain()","README.md":"","pxt.json":"{\n    \"name\": \"Speech regonition\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1755899762655}